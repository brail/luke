name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.18.2'

jobs:
  # Job per linting e type checking
  lint-and-typecheck:
    name: Lint & TypeCheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm typecheck

  # Job per test unitari e integration API
  test-api:
    name: API Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @luke/api prisma:generate

      - name: Run API tests with coverage
        run: pnpm --filter @luke/api test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: ./apps/api/coverage/lcov.info
          flags: api
          name: api-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: api-test-results
          path: |
            apps/api/coverage/
            apps/api/test-results/

  # Job per build delle applicazioni
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @luke/api prisma:generate

      - name: Build applications
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/api/dist/
            apps/web/.next/

  # Job per test E2E con Playwright
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Generate Prisma client
        run: pnpm --filter @luke/api prisma:generate

      - name: Install Playwright browsers
        run: pnpm --filter @luke/web exec playwright install --with-deps chromium

      - name: Start API server
        run: |
          cd apps/api
          pnpm start &
          sleep 10
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db

      - name: Start Web server
        run: |
          cd apps/web
          pnpm start &
          sleep 10
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: Wait for servers to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        run: pnpm --filter @luke/web test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: apps/web/playwright-report/

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-videos
          path: apps/web/test-results/

  # Job per security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Job per dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated dependencies
        run: pnpm outdated --long

  # Job finale che dipende da tutti gli altri
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-api, build, test-e2e, security-audit]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint & TypeCheck: ${{ needs.lint-and-typecheck.result }}"
          echo "API Tests: ${{ needs.test-api.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" || 
                "${{ needs.test-api.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.test-e2e.result }}" != "success" || 
                "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❌ Some jobs failed"
            exit 1
          else
            echo "✅ All jobs passed"
          fi
