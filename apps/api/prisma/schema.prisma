// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum Role {
  admin
  editor
  viewer
}

enum Provider {
  LOCAL
  LDAP
  OIDC
}

enum TokenType {
  RESET
  VERIFY
}

// Models
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  username          String    @unique
  firstName         String    @default("")
  lastName          String    @default("")
  role              Role
  isActive          Boolean   @default(true)
  locale            String    @default("it-IT")
  timezone          String    @default("Europe/Rome")
  tokenVersion      Int       @default(0)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  loginCount        Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  identities Identity[]
  auditLogs  AuditLog[]
  tokens     UserToken[]
  sectionAccess UserSectionAccess[]

  @@map("users")
}

model Identity {
  id         String   @id @default(uuid())
  userId     String
  provider   Provider
  providerId String
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  localCredential LocalCredential?

  @@unique([provider, providerId])
  @@map("identities")
}

model LocalCredential {
  id           String   @id @default(uuid())
  identityId   String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  identity Identity @relation(fields: [identityId], references: [id], onDelete: Cascade)

  @@map("local_credentials")
}

model AppConfig {
  id         String   @id @default(uuid())
  key        String   @unique
  value      String
  isEncrypted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("app_configs")
}

model AuditLog {
  id         String   @id @default(uuid())
  actorId    String?  // Sostituisce userId (più chiaro)
  action     String   // SCREAMING_SNAKE_CASE (es. USER_CREATE)
  targetType String   // Tipo risorsa (User, Config, Auth)
  targetId   String?  // ID risorsa target (opzionale)
  result     String   // SUCCESS o FAILURE (esplicito)
  metadata   Json?    // Dati redatti
  traceId    String?
  ip         String?  // Rinomina da ipAddress per brevità
  createdAt  DateTime @default(now()) // Rinomina da timestamp
  
  // Relations
  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)
  
  @@index([action, createdAt])
  @@index([actorId, createdAt])
  @@index([targetType, targetId])
  @@map("audit_logs")
}

model UserToken {
  id         String    @id @default(uuid())
  userId     String
  type       TokenType
  tokenHash  String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type, tokenHash])
  @@map("user_tokens")
}

model FileObject {
  id             String   @id @default(uuid())
  bucket         String
  key            String
  originalName   String
  size           Int
  contentType    String
  checksumSha256 String
  createdBy      String
  createdAt      DateTime @default(now())

  @@unique([bucket, key])
  @@index([bucket, key])
  @@index([createdAt])
  @@map("file_objects")
}

model UserSectionAccess {
  id        String   @id @default(uuid())
  userId    String
  section   String   // 'settings' | 'maintenance'
  enabled   Boolean  // true=allow, false=deny
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, section])
  @@index([userId, section])
  @@map("user_section_access")
}
